/// <reference path='../typings/tsd.d.ts'/>

import <%= capitalizedProjectName %> = require('../lib/<%= normalizedProjectName %>');

// Use the command `window:run-package-specs` (cmd-alt-ctrl-p) to run specs.
//
// To run a specific `it` or `describe` block add an `f` to the front (e.g. `fit`
// or `fdescribe`). Remove the `f` to unfocus the block.

describe('<%= capitalizedProjectName %>', function() {
    var workspaceElement;
    var activationPromise;

    describe('when the <%= normalizedProjectName %>:toggle event is triggered', function() {
        it('hides and shows the modal panel', function() {

            // Before the activation event the view is not on the DOM, and no panel
            // has been created
            expect(workspaceElement.querySelector('.<%= normalizedProjectName %>')).not.toExist();

            // This is an activation event, triggering it will cause the package to be
            // activated.
            atom.commands.dispatch(workspaceElement, '<%= normalizedProjectName %>:toggle');

            waitsForPromise(function() {
                return activationPromise;
            });

            runs(function() {
                var <%= capitalizedProjectName[0].toLowerCase() + capitalizedProjectName.substring(1) %>Element, <%= capitalizedProjectName[0].toLowerCase() + capitalizedProjectName.substring(1) %>Panel;
                expect(workspaceElement.querySelector('.<%= normalizedProjectName %>')).toExist();

                <%= capitalizedProjectName[0].toLowerCase() + capitalizedProjectName.substring(1) %>Element = workspaceElement.querySelector('.<%= normalizedProjectName %>');
                expect(<%= capitalizedProjectName[0].toLowerCase() + capitalizedProjectName.substring(1) %>Element).toExist();

                <%= capitalizedProjectName[0].toLowerCase() + capitalizedProjectName.substring(1) %>Panel = atom.workspace.panelForItem(<%= capitalizedProjectName[0].toLowerCase() + capitalizedProjectName.substring(1) %>Element);
                expect(<%= capitalizedProjectName[0].toLowerCase() + capitalizedProjectName.substring(1) %>Panel.isVisible()).toBe(true);
                atom.commands.dispatch(workspaceElement, '<%= normalizedProjectName %>:toggle');
                return expect(<%= capitalizedProjectName[0].toLowerCase() + capitalizedProjectName.substring(1) %>Panel.isVisible()).toBe(false);
            });

        });

        it('hides and shows the view', function() {
            // This test shows you an integration test testing at the view level.

            // Attaching the workspaceElement to the DOM is required to allow the
            // `toBeVisible()` matchers to work. Anything testing visibility or focus
            // requires that the workspaceElement is on the DOM. Tests that attach the
            // workspaceElement to the DOM are generally slower than those off DOM.
            jasmine.attachToDOM(workspaceElement);

            expect(workspaceElement.querySelector('.<%= normalizedProjectName %>')).not.toExist();

            // This is an activation event, triggering it causes the package to be
            // activated.
            atom.commands.dispatch(workspaceElement, '<%= normalizedProjectName %>:toggle');

            waitsForPromise(function() {
                return activationPromise;
            });

            runs(function() {
                // Now we can test for view visibility
                var orkeoSdkElement;
                orkeoSdkElement = workspaceElement.querySelector('.orkeo-sdk');
                expect(orkeoSdkElement).toBeVisible();
                atom.commands.dispatch(workspaceElement, 'orkeo-sdk:toggle');
                return expect(orkeoSdkElement).not.toBeVisible();
            });
        });
    });
});
